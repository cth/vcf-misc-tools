#!/usr/bin/env ruby
# Copyright 2015 Christian Theil Have
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
#	The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
require 'bio-samtools'
require 'test/unit'
require 'optparse'
require 'zlib'
require 'pp'

def gzfile?(file)
	if /^.*gz$/.match(file)  
		Zlib::GzipReader 
	else
		File
	end
end

class Chromosome
	include Comparable 

	def initialize(chr)
		@value_str = chr
		chr_suffix=chr.to_s.gsub("chr","")
		if chr_suffix =~ /^.*(X|Y|M|MT)$/ then
			@value_int = ({"X" => 23, "Y" => 24, "M" => 26, "MT" => 26 })[$1]
		elsif chr_suffix.to_i > 0 
			@value_int = chr_suffix.to_i
		else 
			1000 
		end	
	end
	
	def <=>(other)
		self.to_i <=> other.to_i
	end

	def to_i
		@value_int
	end

	def to_s
		@value_str
	end
end

class GRange

	include Comparable

	attr_reader :chr, :from, :to

	def initialize(chr,from=nil,to=nil)
		@chr = Chromosome.new(chr)

		to = from if to.nil?
		to,from = to.to_i,from.to_i
		
		if to < from   
			@from, @to = to, from
		else
			@to, @from = to, from
		end
	end

	def -(i)
		GRange.new(@chr.to_s, [ @from-i, 0 ].max, @to)
	end

	def +(i)
		GRange.new(@chr.to_s, @from, @to+i)
	end

	
	def <=>(other)
		[ self.chr, self.from ] <=> [ other.chr, other.from ] 
	end

	def overlaps(other_range)
		self.left_overlaps(other_range) or self.right_overlaps(other_range) or self.includes(other_range)
	end

	def left_overlaps(other_range)
		@chr == other_range.chr and between(@from, other_range.from, other_range.to)
	end

	def right_overlaps(other_range) 
		@chr == other_range.chr and between(@to, other_range.from, other_range.to)
	end
	
	def includes(other_range)
		other_range.included_in(self)
	end

	def included_in(other_range)
		left_overlaps(other_range) and right_overlaps(other_range)
	end

	def between(in_between, before, after)
		return false if before.nil? or after.nil?
		in_between, before, after = in_between.to_i, before.to_i, after.to_i 
		in_between >= before and in_between <= after
	end
end

def ranges_from_bedfile(file)
	puts "ranges_from_bedfile"
	ranges = []
	File.open(file) do |file|
		file.each do |line|
			if line =~ /^(\S+)\s+(\d+)\s+(\d+).*$/ then
				ranges << GRange.new($1,$2,$3)
			else
				throw "Invalid line #{line} in bed-file: #{file}"
			end	
		end
	end
	ranges
end

def vcf_binary_search(vcf, range, linesize, proximity_range)
	vcf.seek(0, IO::SEEK_END)
	vcf_size = vcf.pos

	index = vcf_size / 2
	change = index / 2
	previous_index = 0

	loop do
		vcfline=nil
		# TODO: We might want do something smart when search is stale, i.e., increasing proximity
		# stale can either mean that proximity setting is too narrow (we might overshoot) or that range was not found
		stale = (previous_index == index) 
		
		previous_index = index

		vcf.seek(index, IO::SEEK_SET)

		# Since we might be in the middle of a line, skip to start of next line:
		begin 
			line=nil
			vcf.gets
			loop do 
				line = vcf.gets
				break unless line =~ /^#.*/
			end 
			vcfline=Bio::DB::Vcf.new(line)
		rescue EOFError => end_of_file
			return false
		end

		vcfrange = GRange.new(vcfline.chrom, vcfline.pos, vcfline.info["END"])

		# FIXME: proximity and line size are (might be) two different things!
		if proximity_range.overlaps(vcfrange) 
			#(range.from - vcfline.pos).abs < proximity 
			# seek at least a 2*linesize backwards to avoid overshooting or reading reading only part of relevant line 
			vcf.seek( [ 0, index-(2*linesize) ].max,IO::SEEK_SET)
			vcf.gets # The first line read might be a "half" line - throw it away
			begin 
				loop do # keep reading lines until we get to range_from
					line = vcf.gets
					next if line =~ /^#.*/
					vcfline = Bio::DB::Vcf.new(line)
					vcfrange = GRange.new(vcfline.chrom, vcfline.pos, vcfline.info["END"])


					if vcfrange.overlaps(range)
						puts line
					elsif vcfrange > range
						return true	
					end
				end
			rescue => e
				STDERR.puts "saved by the bell: #{e.inspect}"
				return
			end
		elsif stale
			return false 
		elsif range < vcfrange then
			index = index - change
		elsif range > vcfrange then
			index = index + change
		end
		change = change / 2
	end
end

##################################### tests ##################################

class Test::Unit::Runner
  @@stop_auto_run = true
end


class TestGRange < Test::Unit::TestCase
	def test_grange_overlaps
		g1 = GRange.new("chr1", 50,100)
		g2 = GRange.new("chr2", 50,100)
		g3 = GRange.new("chr1", 101,200)
		g4 = GRange.new("chr1", 1,75)
		g5 = GRange.new("chr1", 1,150)

		assert(g1.overlaps(g1))
		assert(not(g1.overlaps(g2)))
		assert(not(g1.overlaps(g3)))
		assert(not(g3.overlaps(g1)))
		assert(not(g1.overlaps(g3)))
		assert(g4.overlaps(g1))
		assert(g1.overlaps(g4))
		assert(g1.overlaps(g5))
		assert(g5.overlaps(g1))
	end
end

##################################### main ###################################

options = { :proximity => 1000 }

help = nil
OptionParser.new do |opts|
	opts.on( '-h', '--help', 'Display this message' ) do
		STDERR.puts opts
		exit
	end

	opts.on("-v", "--vcf file.vcf", "VCF file to extract from") do |vcf|
		options[:vcf] = vcf
	end

	opts.on("-c", "--chr chrom", "chromosome") do |chrom|
		options[:chr] = chrom
	end 
	
	opts.on("-p", "--pos position", "Position to extract") do |position|
		options[:to] = options[:from] = position
	end

	opts.on("-f","--from position", "First position to extract") do |pos|
		options[:from] = pos
	end

	opts.on("-t","--to position", "Last position to extract") do |pos|
		options[:to] = pos
	end

	opts.on("-b", "--bed bedfile", "Extract ranges given in bed file" ) do |bedfile|
		options[:bed] = bedfile
	end

	opts.on("-l", "--linear n", "use linear search if current position is less than --to  and within n number of bases") do |n|
		options[:proximity] = n 
	end

	opts.on("-x", "--test", "Run unit tests") do
		options[:test] = true
	end

	help = opts.to_s
end.parse!

if options.include?(:test)
	Test::Unit::Runner.new.run
	exit 
end

begin
	throw("Missing --vcf input file. Cannot proceed!") unless options.include?(:vcf) 
	cmdline_range_specified = [:chr, :to, :from].map { |x| options.include?(x) }.inject { |x,y| x and y }
	throw("Missing range (chromosome/position(s)/bedfile)") unless (cmdline_range_specified or options.include?(:bed))

	ranges = []
	ranges << GRange.new(*([:chr, :to, :from].map { |x| options[x] })) if cmdline_range_specified
	ranges = ranges + ranges_from_bedfile(options[:bed]) if options.include?(:bed)

	vcf = gzfile?(options[:vcf]).open(options[:vcf]) 

	loop do 
		line=vcf.gets
		if line =~ /^#.*/
			puts line
		else
			# assuming that the size of first line is representative of rest, this is the approximate distance
			# where linear search will finally be used after fast binary has narrowed in on the correct line 
			options[:line_size] = line.size 
			break
		end
	end

	ranges.each { |range| vcf_binary_search(vcf, range, options[:linesize].to_i, range-options[:proximity].to_i) }

rescue => e
	STDERR.puts e.to_s.gsub("uncaught throw", "ERROR:")
	STDERR.puts help
ensure
	vcf.close unless vcf.nil?
end
