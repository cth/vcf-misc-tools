#!/home/fng514/bin/ruby
#$ -S /home/fng514/bin/ruby
#$ -cwd
require 'bio-samtools'
require 'zlib'

class DF
	def initialize(file,opts=nil) 
		@file = file
		@opts = opts.nil? ? {} : opts 
		@opts[:separator] ||= / +/
		@opts[:header] ||= false
		@field_names = []
		@field_name_indices = {}
	end

	def each(*fields)
		# automatically assume file with header if named fields are requested
		@opts[:header] ||= (fields.map { |f| f.class }).include?(String)
		File.open(@file) do |f|
			lineno = 0
			f.each do |line|
				line_fields = line.chomp.split(@opts[:separator]).drop_while { |fn| fn =~ /^ *$/ }
				next if line_fields.empty?
				lineno = lineno + 1
				if lineno == 1 and @opts[:header] == true then
					@field_names = line_fields
					0.upto(@field_names.size-1) { |i| @field_name_indices[@field_names[i]] = i }
					next
				end
				extract_line_fields = []
				fields = 0.step(line_fields.size-1,1).to_a if fields.empty? 
				fields.each do |field|
					if field.class == Fixnum then
						extract_line_fields << line_fields[field]
					elsif field.class == String then
						throw "invalid field name '#{field}'" if @field_name_indices[field].nil?
						extract_line_fields << line_fields[@field_name_indices[field]]
					end
				end
				if extract_line_fields.length > 1
					yield extract_line_fields
				else
					yield extract_line_fields.first
				end
			end
		end
	end
end

module Variance
  def sum(&blk)
    map(&blk).inject { |sum, element| sum + element }
  end

  def mean
    (sum.to_f / size.to_f)
  end

  def variance
    m = mean
    sum { |i| ( i - m )**2 } / size
  end

  def std_dev
    Math.sqrt(variance)
  end
end

Array.send :include, Variance

rsnumbers = {}

puts ARGV.inspect

throw "invalid numbmer of args" unless ARGV.size == 3

#DF.new("hg1000nucmtdnab142_c22.csv", { :separator => /,/ }).each("ID") do |rs|
DF.new(ARGV[0], { :separator => /,/ }).each("ID") do |rs|
	rsnumbers[rs] = true  
end

puts "reading vcf"

info_lines = [[ "ID", "noneffectal", "effectal", "chromome", "pos", "codedaf", "INFO" ]]

columns = []

variants_processed=0
File.open(ARGV[1]) do |file|
	file.each do |line|
		next if line =~ /^#.*/
		variants_processed = variants_processed + 1
		puts "variants processed: #{variants_processed}" if variants_processed % 10 == 0
		vcfline=Bio::DB::Vcf.new(line)
		next if rsnumbers[vcfline.id].nil?
		if columns.size == 0 then
			columns << ['']
			vcfline.samples.each do |id,geno|
				columns[0] << id
				puts id
			end
		end
		
		columns << [ vcfline.id ]

		dosage_sum=0
		dosages = []
		vcfline.samples.each do |id,geno|
			columns[columns.size-1] << ("%.3f" % geno["DS"]).to_sym
			dosage_sum = dosage_sum + geno["DS"].to_f
			dosages << geno["DS"].to_f
		end

		# calculate rsq
		# In newer VCFs this may be available directory
		p =  dosages.mean / 2.0
		p_all = 2.0 * p * (1.0 - p)
		rsq = dosages.variance / p_all

		allele_freq ="%.3f" % (dosage_sum.to_f / (2*vcfline.samples.size))

		# todo: RSQ (but we do not need it yet)
		info_lines << [ vcfline.id, vcfline.ref, vcfline.alt, vcfline.chrom, vcfline.pos, allele_freq, rsq ]
	end
end 

rows = columns.transpose

File.open(ARGV[2]+".dosage", "w") do |file|
	rows.each do |r|
		file.puts r.join("\t")		
	end
end

File.open(ARGV[2]+".info", "w") do |file|
	info_lines.each do |fields|
		file.puts fields.join("\t")
	end
end
